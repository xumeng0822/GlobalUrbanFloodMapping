// Load feature collections
var sampleTable = ee.FeatureCollection(
  "projects/ee-floodwk/assets/Total_Sample_uniqueID3"
);
var uniqueIDTable = ee.FeatureCollection(
  "projects/ee-floodwk/assets/uniqueID_300"
);
var level2_dataset = ee.FeatureCollection("FAO/GAUL/2015/level2");
var level1_dataset = ee.FeatureCollection("FAO/GAUL/2015/level1");

/**
 * Function to calculate accuracy metrics and export the results for a given ID.
 * @param {ee.Feature} ID - The uniqueID feature.
 */
function calculateAccuracyMetrics(ID) {
  var eventID = ID.get("uniqueID").getInfo();

  // Split eventID to get emDatEventID
  var emDatEventID = eventID.split("_")[0];

  // Get image result
  var ImageName = "projects/ee-newemdat/assets/FloodImageCol_1/" + emDatEventID;
  var image_result = ee.Image(ImageName);

  // Filter sample table for flood and non-flood classes based on uniqueID
  var flood = sampleTable
    .filterMetadata("uniqueID", "equals", eventID)
    .filterMetadata("class", "equals", "flood");
  var non_flood = sampleTable
    .filterMetadata("uniqueID", "equals", eventID)
    .filterMetadata("class", "equals", "non_flood");
  var ROI = ee.Geometry(image_result.get("system:footprint")).bounds();

  // Generate mask for non-flood areas in image result
  var image_result_non_flood = ee
    .Image(1)
    .clip(ROI)
    .where(image_result, 0)
    .selfMask();

  // Clip flood and non-flood images to ROI
  var GT_flood = ee.Image(1).clipToCollection(flood);
  var GT_non_flood = ee.Image(1).clipToCollection(non_flood);

  // Count number of flood and non-flood pixels in the ROI
  var GT_floodcount = GT_flood.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });
  GT_floodcount = ee.Number(GT_floodcount.get("constant"));
  var GT_non_floodcount = GT_non_flood.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });
  GT_non_floodcount = ee.Number(GT_non_floodcount.get("constant"));

  // Calculate true positives (TP) by taking intersection of GT_flood and image_result
  var TP = GT_flood.and(image_result);
  var TPcount = TP.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });

  // Calculate false negatives (FN) by taking intersection of GT_flood and image_result_non_flood
  var FN = GT_flood.and(image_result_non_flood);
  var FNcount = FN.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });

  // Calculate false positives (FP) by taking intersection of GT_non_flood and image_result
  var FP = GT_non_flood.and(image_result);
  var FPcount = FP.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });

  // Calculate true negatives (TN) by taking intersection of GT_non_flood and image_result_non_flood
  var TN = GT_non_flood.and(image_result_non_flood);
  var TNcount = TN.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });

  // Convert counts to numbers
  TPcount = ee.Number(TPcount.get("constant"));
  FNcount = ee.Number(FNcount.get("constant"));
  FPcount = ee.Number(FPcount.get("constant"));
  TNcount = ee.Number(TNcount.get("constant"));

  // Calculate accuracy metrics
  var totalAdd = TPcount.add(FNcount).add(FPcount).add(TNcount);
  var Accuracy = TPcount.add(TNcount).divide(totalAdd);
  var Precision = TPcount.divide(TPcount.add(FPcount));
  var Recall = TPcount.divide(TPcount.add(FNcount));
  var F1_Score = Precision.multiply(Recall)
    .multiply(2)
    .divide(Precision.add(Recall));

  // Calculate flood and non-flood areas
  var pixelArea = ee.Image.pixelArea();
  var floodArea = pixelArea.updateMask(GT_flood);
  var GT_flood_area = floodArea.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });
  GT_flood_area = ee.Number(GT_flood_area.get("area")).divide(1e6);
  var nonfloodArea = pixelArea.updateMask(GT_non_flood);
  var GT_non_flood_area = nonfloodArea.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: ROI,
    scale: 10,
    maxPixels: 10e13,
  });
  GT_non_flood_area = ee.Number(GT_non_flood_area.get("area")).divide(1e6);

  // Extract name from eventID
  var name = eventID.split("_")[1];

  // Create a feature with the accuracy metrics and additional information
  var Confusion = ee.Feature(null, {
    Label: totalAdd,
    Label_Non_Flood: GT_non_floodcount,
    Label_Flood: GT_floodcount,
    ID: emDatEventID,
    Name: name,
    TP: TPcount,
    FN: FNcount,
    FP: FPcount,
    TN: TNcount,
    Accuracy: Accuracy.format("%.4f"),
    Precision: Precision.format("%.4f"),
    Recall: Recall.format("%.4f"),
    F1_Score: F1_Score.format("%.4f"),
    flood_label_area_km2: GT_flood_area.format("%.4f"),
    non_flood_label_area_km2: GT_non_flood_area.format("%.4f"),
  });

  // Define output name
  var outputname2 = "C_" + emDatEventID;

  // Export the confusion table to Google Drive as a CSV file
  Export.table.toDrive({
    collection: ee.FeatureCollection([Confusion]),
    folder: "Fixed_Box_Confusion_411_Area",
    description: outputname2,
    fileFormat: "CSV",
  });
}

// Get the total number of unique IDs
var totalID = uniqueIDTable.size();

// Convert the ID table to a list
var IDlist = uniqueIDTable.toList(totalID);

// Iterate over a subset of IDs and calculate accuracy metrics for each ID
for (var i = 200; i < 300; i++) {
  calculateAccuracyMetrics(ee.Feature(IDlist.get(i)));
}
